'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _clientStartup = require('./clientStartup');

var _clientStartup2 = _interopRequireDefault(_clientStartup);

var _handleError2 = require('./handleError');

var _handleError3 = _interopRequireDefault(_handleError2);

var _ComponentStore = require('./ComponentStore');

var _ComponentStore2 = _interopRequireDefault(_ComponentStore);

var _serverRenderReactComponent2 = require('./serverRenderReactComponent');

var _serverRenderReactComponent3 = _interopRequireDefault(_serverRenderReactComponent2);

var _buildConsoleReplay2 = require('./buildConsoleReplay');

var _buildConsoleReplay3 = _interopRequireDefault(_buildConsoleReplay2);

var _createReactElement = require('./createReactElement');

var _createReactElement2 = _interopRequireDefault(_createReactElement);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _context = require('./context');

var _context2 = _interopRequireDefault(_context);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ctx = (0, _context2.default)();

var DEFAULT_OPTIONS = {
  traceTurbolinks: false
};

ctx.ReactOnRails = {
  /**
   * Set options for ReactOnRails, typically before you call ReactOnRails.register
   * Available Options:
   * `traceTurbolinks: true|false Gives you debugging messages on Turbolinks events
   */

  setOptions: function setOptions(options) {
    if (options.hasOwnProperty('traceTurbolinks')) {
      this._options.traceTurbolinks = options.traceTurbolinks;
      delete options.traceTurbolinks;
    }

    if ((0, _keys2.default)(options).length > 0) {
      throw new Error('Invalid options passed to ReactOnRails.options: ', (0, _stringify2.default)(options));
    }
  },
  option: function option(key) {
    return this._options[key];
  },

  /**
   * Main entry point to using the react-on-rails npm package. This is how Rails will be able to
   * find you components for rendering.
   * @param components (key is component name, value is component)
   */
  register: function register(components) {
    _ComponentStore2.default.register(components);
  },

  /**
   * ReactOnRails.render("HelloWorldApp", {name: "Stranger"}, 'app');
   *
   * Does this:
   *   ReactDOM.render(React.createElement(HelloWorldApp, {name: "Stranger"}),
   *     document.getElementById('app'))
   *
   * @param name Name of your registered component
   * @param props Props to pass to your component
   * @param domNodeId
   * @returns {virtualDomElement} Reference to your component's backing instance
   */
  render: function render(name, props, domNodeId) {
    var reactElement = (0, _createReactElement2.default)({ name: name, props: props, domNodeId: domNodeId });
    return _reactDom2.default.render(reactElement, document.getElementById(domNodeId));
  },

  /**
   * Get the component that you registered
   * @param name
   * @returns {name, component, generatorFunction}
   */
  getComponent: function getComponent(name) {
    return _ComponentStore2.default.get(name);
  },

  /**
   * Used by server rendering by Rails
   * @param options
   */
  serverRenderReactComponent: function serverRenderReactComponent(options) {
    return (0, _serverRenderReactComponent3.default)(options);
  },

  /**
   * Used by Rails to catch errors in rendering
   * @param options
   */
  handleError: function handleError(options) {
    return (0, _handleError3.default)(options);
  },

  /**
   * Used by Rails server rendering to replay console messages.
   */
  buildConsoleReplay: function buildConsoleReplay() {
    return (0, _buildConsoleReplay3.default)();
  },

  /**
   * Get an Object containing all registered components. Useful for debugging.
   * @returns {*}
   */
  registeredComponents: function registeredComponents() {
    return _ComponentStore2.default.components();
  },
  resetOptions: function resetOptions() {
    this._options = (0, _assign2.default)({}, DEFAULT_OPTIONS);
  }
};

ReactOnRails.resetOptions();

(0, _clientStartup2.default)(ctx);

exports.default = ctx.ReactOnRails;