// Generated by CoffeeScript 1.6.3
var Cmd, Color, Opt, Q, fs;

fs = require('fs');

Q = require('q');

Color = require('./color').Color;

Cmd = require('./cmd').Cmd;

/**
Option

Named entity. Options may have short and long keys for use from command line.
@namespace
@class Presents option
*/


exports.Opt = Opt = (function() {
  /**
  @constructs
  @param {COA.Cmd} cmd parent command
  */

  function Opt(_cmd) {
    this._cmd = _cmd;
    this._cmd._opts.push(this);
  }

  /**
  Set a canonical option identifier to be used anywhere in the API.
  @param {String} _name option name
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.name = function(_name) {
    this._name = _name;
    return this;
  };

  /**
  Set a long description for option to be used anywhere in text messages.
  @param {String} _title option title
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.title = Cmd.prototype.title;

  /**
  Set a short key for option to be used with one hyphen from command line.
  @param {String} _short
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.short = function(_short) {
    this._short = _short;
    return this._cmd._optsByKey['-' + _short] = this;
  };

  /**
  Set a short key for option to be used with double hyphens from command line.
  @param {String} _long
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.long = function(_long) {
    this._long = _long;
    return this._cmd._optsByKey['--' + _long] = this;
  };

  /**
  Make an option boolean, i.e. option without value.
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.flag = function() {
    this._flag = true;
    return this;
  };

  /**
  Makes an option accepts multiple values.
  Otherwise, the value will be used by the latter passed.
  @returns {COA.Opt} this instance (for chainability)
  */


  Opt.prototype.arr = function() {
    this._arr = true;
    return this;
  };

  /**
  Makes an option required.
  @returns {